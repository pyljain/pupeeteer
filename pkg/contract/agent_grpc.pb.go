// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.2
// source: pkg/contract/agent.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PuppetService_GetCommands_FullMethodName = "/puppeteer.PuppetService/GetCommands"
	PuppetService_SendResult_FullMethodName  = "/puppeteer.PuppetService/SendResult"
	PuppetService_GetFile_FullMethodName     = "/puppeteer.PuppetService/GetFile"
	PuppetService_Heartbeat_FullMethodName   = "/puppeteer.PuppetService/Heartbeat"
)

// PuppetServiceClient is the client API for PuppetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PuppetServiceClient interface {
	GetCommands(ctx context.Context, in *GetCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Command], error)
	SendResult(ctx context.Context, in *SendResultRequest, opts ...grpc.CallOption) (*SendResultResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[File], error)
	Heartbeat(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PingResponse], error)
}

type puppetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPuppetServiceClient(cc grpc.ClientConnInterface) PuppetServiceClient {
	return &puppetServiceClient{cc}
}

func (c *puppetServiceClient) GetCommands(ctx context.Context, in *GetCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Command], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PuppetService_ServiceDesc.Streams[0], PuppetService_GetCommands_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCommandRequest, Command]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PuppetService_GetCommandsClient = grpc.ServerStreamingClient[Command]

func (c *puppetServiceClient) SendResult(ctx context.Context, in *SendResultRequest, opts ...grpc.CallOption) (*SendResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResultResponse)
	err := c.cc.Invoke(ctx, PuppetService_SendResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[File], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PuppetService_ServiceDesc.Streams[1], PuppetService_GetFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileRequest, File]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PuppetService_GetFileClient = grpc.ServerStreamingClient[File]

func (c *puppetServiceClient) Heartbeat(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PuppetService_ServiceDesc.Streams[2], PuppetService_Heartbeat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PingRequest, PingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PuppetService_HeartbeatClient = grpc.ServerStreamingClient[PingResponse]

// PuppetServiceServer is the server API for PuppetService service.
// All implementations must embed UnimplementedPuppetServiceServer
// for forward compatibility.
type PuppetServiceServer interface {
	GetCommands(*GetCommandRequest, grpc.ServerStreamingServer[Command]) error
	SendResult(context.Context, *SendResultRequest) (*SendResultResponse, error)
	GetFile(*GetFileRequest, grpc.ServerStreamingServer[File]) error
	Heartbeat(*PingRequest, grpc.ServerStreamingServer[PingResponse]) error
	mustEmbedUnimplementedPuppetServiceServer()
}

// UnimplementedPuppetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPuppetServiceServer struct{}

func (UnimplementedPuppetServiceServer) GetCommands(*GetCommandRequest, grpc.ServerStreamingServer[Command]) error {
	return status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedPuppetServiceServer) SendResult(context.Context, *SendResultRequest) (*SendResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResult not implemented")
}
func (UnimplementedPuppetServiceServer) GetFile(*GetFileRequest, grpc.ServerStreamingServer[File]) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedPuppetServiceServer) Heartbeat(*PingRequest, grpc.ServerStreamingServer[PingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedPuppetServiceServer) mustEmbedUnimplementedPuppetServiceServer() {}
func (UnimplementedPuppetServiceServer) testEmbeddedByValue()                       {}

// UnsafePuppetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PuppetServiceServer will
// result in compilation errors.
type UnsafePuppetServiceServer interface {
	mustEmbedUnimplementedPuppetServiceServer()
}

func RegisterPuppetServiceServer(s grpc.ServiceRegistrar, srv PuppetServiceServer) {
	// If the following call pancis, it indicates UnimplementedPuppetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PuppetService_ServiceDesc, srv)
}

func _PuppetService_GetCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServiceServer).GetCommands(m, &grpc.GenericServerStream[GetCommandRequest, Command]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PuppetService_GetCommandsServer = grpc.ServerStreamingServer[Command]

func _PuppetService_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServiceServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PuppetService_SendResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServiceServer).SendResult(ctx, req.(*SendResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PuppetService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServiceServer).GetFile(m, &grpc.GenericServerStream[GetFileRequest, File]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PuppetService_GetFileServer = grpc.ServerStreamingServer[File]

func _PuppetService_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServiceServer).Heartbeat(m, &grpc.GenericServerStream[PingRequest, PingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PuppetService_HeartbeatServer = grpc.ServerStreamingServer[PingResponse]

// PuppetService_ServiceDesc is the grpc.ServiceDesc for PuppetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PuppetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "puppeteer.PuppetService",
	HandlerType: (*PuppetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendResult",
			Handler:    _PuppetService_SendResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCommands",
			Handler:       _PuppetService_GetCommands_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _PuppetService_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Heartbeat",
			Handler:       _PuppetService_Heartbeat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/contract/agent.proto",
}
